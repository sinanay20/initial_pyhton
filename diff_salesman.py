#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Name: diff_salesman
# Author: Samuel Bramm
# Co-Author: Benjamin Schmelcher
# Date: 2018-08-06
# Description: creates EDF xml files based on excel sheet generated by the check_salesman script
# Version: v1.0

import time
import tkMessageBox
from Tkinter import *
from tkFileDialog import askopenfilename
from ttk import *

import yaml
from openpyxl import *

from patterns.db_connection import db_connection

root = Tk()
config_file_path = "./config/check_salesman.yml"
input_file_path = ""
tenants = []
file_set = IntVar()
parse_done = IntVar()
found_salesman = []
found_orgs = []

connection_established = IntVar()

connection = db_connection()


def create_salesman_xml(tenant, added_users):
    global input_file_path
    global found_salesman
    global found_orgs
    orgs = [x[0] for x in found_orgs]
    today = time.strftime("%Y-%m-%d")
    out_file_path = os.path.dirname(
        input_file_path) + "/01-PhysicalPerson_" + today + "T000000_" + tenant.upper() + "_ICON_tec_EDF01_Salesman_00001.xml"
    with open(out_file_path, 'w') as salesman_output:
        # write header
        salesman_output.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n")
        salesman_output.write(
            "<common:ServiceInvocationCollection xmlns:common=\"http://common.icon.daimler.com/il\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:partner_pl=\"http://partner.icon.daimler.com/pl\" xmlns:mdsd_sl=\"http://system.mdsd.ibm.com/sl\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n")
        salesman_output.write(
            "  <!--Related to CIM: 20140811_CIM_EDF_PhysicalPerson(salesman)_Mig_BEL_WavePreInt4_iter1_v1.0.xlsx-->\n")
        salesman_output.write("  <!--Related to Masterdata:5.11-->\n")
        salesman_output.write("  <!--Source-database: db3.S415VM779.tst-->\n")
        salesman_output.write(
            "  <executionSettings xsi:type=\"mdsd_sl:ExecutionSettingsType\" dateTime=\"" + today + "T00:00:00\" userId=\"ICON_tec_EDF01\" tenantId=\"" + tenant + "\" causation=\"migration\" additionalInformation1=\"1\" correlationId=\"initial export\" issueThreshold=\"error\"/>\n")
        for user in found_salesman:
            if user[6] in orgs:
                salesman_output.write("  <invocation operation=\"createPhysicalPerson\">\n")
                salesman_output.write("    <parameter xsi:type=\"partner_pl:PhysicalPersonType\" externalId=\"" + user[
                    0].upper() + "\" sourceSystem=\"migration\" masterDataReleaseVersion=\"9\" partnerType=\"salesman\" migrationDate=\"" + today + "T00:00:00\" firstName=\"" +
                                      user[1] + "\" lastName=\"" + user[
                                          2] + "\" isUserLastLogin=\"false\" dealerDirectoryUid=\"" + user[
                                          0].upper() + "\" organisationalLevel=\"mpc\">\n")
                comm_data = ""
                if user[3] != "" or user[4] != "" or user[5] != "":
                    comm_data = comm_data + '      <communicationData'
                    if user[3] != "":
                        comm_data = comm_data + ' phoneNumber=\"' + user[3] + '\"'
                    if user[4] != "":
                        comm_data = comm_data + ' mobile=\"' + user[4] + '\"'
                    if user[5] != "":
                        comm_data = comm_data + ' email=\"' + user[5] + '\"'
                    comm_data = comm_data + '/>\n'
                    salesman_output.write(comm_data)
                salesman_output.write("    </parameter>\n")
                salesman_output.write("  </invocation>\n")
        salesman_output.write("</common:ServiceInvocationCollection>")
    return None


def get_org_data(tenant, org):
    # connect to database and fetch data for given gssn

    data_stmt = "SELECT pp.EXTERNALID, pp.COMPANYNAME, pp.COMPANYNAME2, pp.VATID, pp.GSSNOUTLETCOMPANYID, pp.GSSNOUTLETOUTLETID, pa.CITY, pa.COUNTRY, pa.STREET, pa.ZIPCODE, pc.PHONENUMBER, pc.FAXNUMBER from icon.PARTNER_PARTNER pp JOIN icon.PARTNER_ADDRESS pa ON pp.LEGALADDRESS_OBJECTID = pa.OBJECTID JOIN icon.PARTNER_COMMUNICATIONDATA pc on pp.COMMUNICATIONDATA_OBJECTID = pc.OBJECTID WHERE pp.OBJECTINSTANCETYPE = 'OrganisationalPerson' AND pp.GSSNOUTLETOUTLETID = \'" + org + "\' AND pp.TENANTID = \'" + tenant + "\' AND pa.TENANTID = \'" + tenant + "\' AND pc.TENANTID = \'" + tenant + "\';"

    data_results = connection.execute_query(data_stmt)

    if data_results:
        clean_results = []
        for x in list(data_results):
            if x is None:
                clean_results.append("")
            else:
                clean_results.append(x.encode('utf-8'))
        # data_results = [x.encode('utf-8') for x in data_results if x is not None]
        return clean_results
    else:
        return data_results


def create_dealer_xml(tenant):
    global found_salesman
    global found_orgs
    global input_file_path
    added_users = []

    today = time.strftime("%Y-%m-%d")
    out_file_path = os.path.dirname(
        input_file_path) + "/02-OrganisationalPerson_" + today + "T000000_" + tenant.upper() + "_ICON_tec_EDF01_Dealer-00001.xml"
    uniqe_orgs = []
    for user in found_salesman:
        if user[6] != "" and user[6] not in uniqe_orgs:
            uniqe_orgs.append(user[6])
    for o in found_orgs:
        if o[0] not in uniqe_orgs:
            uniqe_orgs.append(o[0])

    with open(out_file_path, 'a') as dealer_file:
        # write header
        dealer_file.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n")
        dealer_file.write(
            "<common:ServiceInvocationCollection xmlns:common=\"http://common.icon.daimler.com/il\" xmlns:partner_pl=\"http://partner.icon.daimler.com/pl\" xmlns:mdsd_sl=\"http://system.mdsd.ibm.com/sl\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n")
        dealer_file.write(
            "  <!--Related to CIM: 20140811_CIM_EDF_OrganisationalPerson(dealer)_Mig_BEL_WavePreInt4_iter1_v1.0.xlsx-->\n")
        dealer_file.write("  <!--Related to Masterdata:5.11-->\n")
        dealer_file.write("  <!--Source-database: db3.S415VM779.tst-->\n")
        dealer_file.write(
            "  <executionSettings xsi:type=\"mdsd_sl:ExecutionSettingsType\" dateTime=\"" + today + "T00:00:00\" userId=\"ICON_tec_EDF01\" tenantId=\"" + tenant + "\" causation=\"migration\" additionalInformation1=\"1\" issueThreshold=\"error\"/>\n")

        for org in uniqe_orgs:
            # get dealer data
            org_data = [x for x in found_orgs if x[0] == org]
            get_org_data(tenant, org)
            if org_data:
                org_data = org_data[0]
            else:
                org_data = get_org_data(tenant, org)
            if org_data is False:
                tkMessageBox.showerror("Missing Data",
                                       "The organisational data for {} is missing. The salesman for this organisation will not be included in the xml file.".format(
                                           org))
            else:
                dealer_file.write("  <invocation operation=\"createOrganisationalPerson\">\n")
                dealer_file.write(
                    "    <parameter xsi:type=\"partner_pl:OrganisationalPersonType\" externalId=\"" + org_data[
                        1] + "\" sourceSystem=\"migration\" masterDataReleaseVersion=\"9\" partnerType=\"dealer\" state=\"active\" migrationDate=\"" + today + "T00:00:00\" companyName=\"" +
                    org_data[2] + "\" companyName2=\"" + org_data[3] + "\" companyInternal=\"no\" vatId=\"" + org_data[
                        4] + "\" gssnOutletCompanyId=\"" + org_data[5] + "\" gssnOutletOutletId=\"" + org + "\">\n")
                dealer_file.write(
                    "      <communicationData phoneNumber=\"" + org_data[10] + "\" faxNumber=\"" + org_data[
                        11] + "\"/>\n")
                dealer_file.write(
                    "      <legalAddress city=\"" + org_data[6] + "\" country=\"" + org_data[7] + "\" street=\"" +
                    org_data[8] + "\" zipCode=\"" + org_data[9] + "\"/>\n")
                for user in found_salesman:
                    if user[6] == org:
                        dealer_file.write("        <contactPartnerAssignment internal=\"false\" salesman=\"true\">\n")
                        dealer_file.write(
                            "          <contactPerson xsi:type=\"partner_pl:PhysicalPersonType\" externalId=\"" + user[
                                0].upper() + "\" sourceSystem=\"migration\"/>\n")
                        dealer_file.write("        </contactPartnerAssignment>\n")
                        if user[0].upper() not in added_users:
                            added_users.append(user[0].upper())
                dealer_file.write("    </parameter>\n")
                dealer_file.write("  </invocation>\n")
        # finalize file
        dealer_file.write("</common:ServiceInvocationCollection>")
    return out_file_path, added_users


def parse_excel():
    # parse excel file and update global variables
    global found_orgs
    global found_salesman
    global parse_done
    global input_file_path
    try:
        book = load_workbook(input_file_path, data_only=True)
        sheets = book.get_sheet_names()
        for sheet in [book.get_sheet_by_name(sheets[0]), book.get_sheet_by_name(sheets[2])]:
            for i, u in enumerate(sheet.iter_rows()):
                if i > 0:
                    tmp_row = []
                    for j, v in enumerate(u):
                        cell = sheet.cell(row=i + 1, column=j + 1).value
                        if cell is None:
                            tmp_row.append("")
                        else:
                            tmp_row.append(cell.encode('utf-8'))
                    found_salesman.append(tmp_row)

        sheet = book.get_sheet_by_name(sheets[1])
        for i, u in enumerate(sheet.iter_rows()):
            if i > 0:
                tmp_row = []
                for j, v in enumerate(u):
                    cell = sheet.cell(row=i + 1, column=j + 1).value
                    if cell is None:
                        tmp_row.append("")
                    else:
                        if isinstance(cell, unicode):
                            try:
                                tmp = cell.encode('utf-8')
                                tmp_row.append(tmp)
                            except UnicodeError:
                                tkMessageBox.showerror("Unicode Error", "Error decoding {}".format(cell))
                        else:
                            try:
                                tmp_row.append(str(cell).encode('utf-8'))
                            except UnicodeError:
                                tkMessageBox.showerror("Unicode Error", "Error decoding {}".format(cell))
                found_orgs.append(tmp_row)
    except IOError:
        tkMessageBox.showerror("I/O Error", "Error opening file {}".format(input_file_path))
    parse_done.set(1)
    return None


def select_file():
    # ask user for filename and update global file path
    global input_file_path
    global file_set
    input_file_path = askopenfilename(initialdir=os.getcwd(), title="Choose the Excel file",
                                      filetypes=[("Excel", "*.xlsx")])
    file_set.set(1)
    return None


def read_config():
    # read configuration data from file
    global config_file_path
    global tenants
    global server_data
    try:
        config = yaml.safe_load(open(config_file_path))
        tenants = config["tenants"]

    except IOError:
        tkMessageBox.showerror("I/O Error", "Error reading configuration file from %s" % config_file_path)
    return None


def show_connect_window(connection_button):
    global connection_established
    global connection_established
    connection_button.config(state=DISABLED)
    connection.show_db_data_window()

    connection_established.set(1)




def exit_function():
    connection.close_connection()
    os._exit(-1)


def main():
    global root
    global file_set
    global tenants
    global server_data
    global parse_done
    root.protocol("WM_DELETE_WINDOW", exit_function)
    root.title("Create differential EDF files")

    putty_label = Label(root, text="1. Establish a putty connection to the database")
    putty_label.grid(row=0, column=0, padx=10, pady=10)

    connect_label = Label(root, text="2. Press the connect button")
    connect_label.grid(row=1, column=0, padx=10, pady=10)

    connect_button = Button(root, text="connect", command=lambda: show_connect_window(connect_button))
    connect_button.grid(row=1, column=1, padx=10, pady=10)

    root.wait_variable(connection_established)

    select_label = Label(root, text="3. Select Excel file containing necessary information.")
    select_label.grid(row=2, column=0, padx=10, pady=10)
    select_button = Button(root, text="select", command=lambda: select_file())
    select_button.grid(row=2, column=1, padx=10, pady=10)
    root.wait_variable(file_set)
    select_button.config(state=DISABLED)
    option_label = Label(root, text="4. Select the tenant where you want to check the salesman.")
    option_label.grid(row=3, column=0, columnspan=2, padx=10, pady=10)
    tenant_label = Label(root, text="tenant")
    tenant_label.grid(row=4, column=0, padx=10, pady=10)
    tenant = StringVar()
    tenant_dropdown = OptionMenu(root, tenant, *sorted(tenants))
    tenant_dropdown.grid(row=5, column=0, padx=10, pady=10)
    exec_label = Label(root, text="5. Press the create Button.")
    exec_label.grid(row=6, column=0, padx=10, pady=10)
    exec_button = Button(root, text="create", command=lambda: parse_excel())
    exec_button.grid(row=6, column=1, padx=10, pady=10)
    root.wait_variable(parse_done)
    exec_button.config(state=DISABLED)
    out_path, added_users = create_dealer_xml(tenant.get())
    create_salesman_xml(tenant.get(), added_users)
    if tkMessageBox.askyesno("Success",
                             "The XML-File is located at %s. Do you want to quit?" % out_path):
        connection.close_connection()
        exit(0)

    root.mainloop()
    connection.close_connection()
    exit(0)


if __name__ == '__main__':
    read_config()
    main()
